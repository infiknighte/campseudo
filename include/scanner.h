#ifndef CAMPSEUDO_LEXER_H
#define CAMPSEUDO_LEXER_H

#include "common.h"

#define TOKEN_UNDEFINED                                                        \
  ((struct token){.kind = 0, .start = NULL, .length = 0, .line = 0})

enum token_kind : uint8_t {
  // Specail
  TOKEN_KIND_SP_EOF,
  TOKEN_KIND_SP_EOL,
  TOKEN_KIND_SP_ERROR,
  TOKEN_KIND_SP_IDENT,

  // Literals
  TOKEN_KIND_LT_CHAR,
  TOKEN_KIND_LT_DATE,
  TOKEN_KIND_LT_FALSE,
  TOKEN_KIND_LT_INTEGER,
  TOKEN_KIND_LT_REAL,
  TOKEN_KIND_LT_STRING,
  TOKEN_KIND_LT_TRUE,

  // Binary Operators
  TOKEN_KIND_OP_ADDITION,
  TOKEN_KIND_OP_ASSIGN,
  TOKEN_KIND_OP_BRACKET_CLOSE,
  TOKEN_KIND_OP_BRACKET_OPEN,
  TOKEN_KIND_OP_COLON,
  TOKEN_KIND_OP_CONCAT,
  TOKEN_KIND_OP_COMMA,
  TOKEN_KIND_OP_CARET,
  TOKEN_KIND_OP_DIVISION,
  TOKEN_KIND_OP_DOT,
  TOKEN_KIND_OP_EQUAL_TO,
  TOKEN_KIND_OP_GREATER_OR_EQUAL_TO,
  TOKEN_KIND_OP_GREATER_THAN,
  TOKEN_KIND_OP_LESS_OR_EQUAL_TO,
  TOKEN_KIND_OP_LESS_THAN,
  TOKEN_KIND_OP_MULTIPLICATION,
  TOKEN_KIND_OP_NOT_EQUAL_TO,
  TOKEN_KIND_OP_PAREN_CLOSE,
  TOKEN_KIND_OP_PAREN_OPEN,
  TOKEN_KIND_OP_SUBTRACTION,

  // Keywords
  TOKEN_KIND_KW_AND,
  TOKEN_KIND_KW_APPEND,
  TOKEN_KIND_KW_ARRAY,
  TOKEN_KIND_KW_BOOLEAN,
  TOKEN_KIND_KW_BYREF,
  TOKEN_KIND_KW_BYVAL,
  TOKEN_KIND_KW_CALL,
  TOKEN_KIND_KW_CASE,
  TOKEN_KIND_KW_CHAR,
  TOKEN_KIND_KW_CLASS,
  TOKEN_KIND_KW_CLOSEFILE,
  TOKEN_KIND_KW_CONSTANT,
  TOKEN_KIND_KW_DATE,
  TOKEN_KIND_KW_DECLARE,
  TOKEN_KIND_KW_DEFINE,
  TOKEN_KIND_KW_DIV,
  TOKEN_KIND_KW_ELSE,
  TOKEN_KIND_KW_ENDCASE,
  TOKEN_KIND_KW_ENDCLASS,
  TOKEN_KIND_KW_ENDFUNCTION,
  TOKEN_KIND_KW_ENDIF,
  TOKEN_KIND_KW_ENDPROCEDURE,
  TOKEN_KIND_KW_ENDTYPE,
  TOKEN_KIND_KW_ENDWHILE,
  TOKEN_KIND_KW_FOR,
  TOKEN_KIND_KW_FUNCTION,
  TOKEN_KIND_KW_GETRECORD,
  TOKEN_KIND_KW_IF,
  TOKEN_KIND_KW_INHERITS,
  TOKEN_KIND_KW_INPUT,
  TOKEN_KIND_KW_INTEGER,
  TOKEN_KIND_KW_MOD,
  TOKEN_KIND_KW_NEW,
  TOKEN_KIND_KW_NEXT,
  TOKEN_KIND_KW_NOT,
  TOKEN_KIND_KW_OF,
  TOKEN_KIND_KW_OPENFILE,
  TOKEN_KIND_KW_OR,
  TOKEN_KIND_KW_OTHERWISE,
  TOKEN_KIND_KW_OUTPUT,
  TOKEN_KIND_KW_PRIVATE,
  TOKEN_KIND_KW_PROCEDURE,
  TOKEN_KIND_KW_PUBLIC,
  TOKEN_KIND_KW_PUTRECORD,
  TOKEN_KIND_KW_RANDOM,
  TOKEN_KIND_KW_READFILE,
  TOKEN_KIND_KW_READ,
  TOKEN_KIND_KW_REAL,
  TOKEN_KIND_KW_REPEAT,
  TOKEN_KIND_KW_RETURNS,
  TOKEN_KIND_KW_RETURN,
  TOKEN_KIND_KW_SEEK,
  TOKEN_KIND_KW_SET,
  TOKEN_KIND_KW_STEP,
  TOKEN_KIND_KW_STRING,
  TOKEN_KIND_KW_SUPER,
  TOKEN_KIND_KW_THEN,
  TOKEN_KIND_KW_TO,
  TOKEN_KIND_KW_TYPE,
  TOKEN_KIND_KW_UNTIL,
  TOKEN_KIND_KW_WHILE,
  TOKEN_KIND_KW_WRITEFILE,
  TOKEN_KIND_KW_WRITE,
};

struct token {
  enum token_kind kind;
  const char *start;
  uint32_t length;
  uint32_t line;
};

struct scanner {
  const char *start;
  const char *current;
  uint32_t line;
};

void scanner_init(struct scanner *scanner, const char *source);
struct token scanner_scan_token(struct scanner *scanner);

#endif
